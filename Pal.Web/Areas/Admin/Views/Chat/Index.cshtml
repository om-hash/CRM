@model IEnumerable<Pal.Core.Domains.Chat.ChatMessage>

<style>
    .card-bordered {
        border: 1px solid #ebebeb;
    }

    .card {
        border: 0;
        border-radius: 0px;
        margin-bottom: 30px;
        -webkit-box-shadow: 0 2px 3px rgba(0,0,0,0.03);
        box-shadow: 0 2px 3px rgba(0,0,0,0.03);
        -webkit-transition: .5s;
        transition: .5s;
    }

    .padding {
        padding: 3rem !important
    }

    body {
        background-color: #f9f9fa
    }

    .card-header:first-child {
        border-radius: calc(.25rem - 1px) calc(.25rem - 1px) 0 0;
    }


    .card-header {
        display: -webkit-box;
        display: flex;
        -webkit-box-pack: justify;
        justify-content: space-between;
        -webkit-box-align: center;
        align-items: center;
        padding: 15px 20px;
        background-color: transparent;
        border-bottom: 1px solid rgba(77,82,89,0.07);
    }

        .card-header .card-title {
            padding: 0;
            border: none;
        }

    h4.card-title {
        font-size: 17px;
    }

    .card-header > *:last-child {
        margin-right: 0;
    }

    .card-header > * {
        margin-left: 8px;
        margin-right: 8px;
    }

    .btn-secondary {
        color: #4d5259 !important;
        background-color: #e4e7ea;
        border-color: #e4e7ea;
        color: #fff;
    }

    .btn-xs {
        font-size: 11px;
        padding: 2px 8px;
        line-height: 18px;
    }

        .btn-xs:hover {
            color: #fff !important;
        }




    .card-title {
        font-family: Roboto,sans-serif;
        font-weight: 300;
        line-height: 1.5;
        margin-bottom: 0;
        padding: 15px 20px;
        border-bottom: 1px solid rgba(77,82,89,0.07);
    }


    .ps-container {
        position: relative;
    }

    .ps-container {
        -ms-touch-action: auto;
        touch-action: auto;
        overflow: hidden !important;
        -ms-overflow-style: none;
    }

    .media-chat {
        padding-right: 64px;
        margin-bottom: 0;
    }

    .media {
        /*padding: 16px 12px;*/
        -webkit-transition: background-color .2s linear;
        transition: background-color .2s linear;
    }

        .media .avatar {
            flex-shrink: 0;
        }

    .avatar {
        position: relative;
        display: inline-block;
        width: 36px;
        height: 36px;
        line-height: 36px;
        text-align: center;
        border-radius: 100%;
        background-color: #f5f6f7;
        color: #8b95a5;
        text-transform: uppercase;
    }

    .media-chat .media-body {
        -webkit-box-flex: initial;
        flex: initial;
        display: table;
    }

    .media-body {
        min-width: 0;
    }

    .media-chat .media-body p {
        position: relative;
        padding: 6px 8px;
        margin: 4px 0;
        background-color: #f5f6f7;
        border-radius: 3px;
        font-weight: 100;
        color: #434446;
    }

    .media > * {
        margin: 0 8px;
    }

    .media-chat .media-body p.meta {
        background-color: transparent !important;
        padding: 0;
        opacity: .8;
    }

    .media-meta-day {
        -webkit-box-pack: justify;
        justify-content: space-between;
        -webkit-box-align: center;
        align-items: center;
        margin-bottom: 0;
        color: #8b95a5;
        opacity: .8;
        font-weight: 400;
    }

    .media {
        /*padding: 16px 12px;*/
        -webkit-transition: background-color .2s linear;
        transition: background-color .2s linear;
    }

    .media-meta-day::before {
        margin-right: 16px;
    }

    .media-meta-day::before, .media-meta-day::after {
        content: '';
        -webkit-box-flex: 1;
        flex: 1 1;
        border-top: 1px solid #ebebeb;
    }

    .media-meta-day::after {
        content: '';
        -webkit-box-flex: 1;
        flex: 1 1;
        border-top: 1px solid #ebebeb;
    }

    .media-meta-day::after {
        margin-left: 16px;
    }

    .media-chat.media-chat-reverse {
        padding-right: 12px;
        padding-left: 64px;
        -webkit-box-orient: horizontal;
        -webkit-box-direction: reverse;
        flex-direction: row-reverse;
    }

    .media-chat {
        padding-right: 64px;
        margin-bottom: 0;
    }

    .media {
        /*padding: 16px 12px;*/
        -webkit-transition: background-color .2s linear;
        transition: background-color .2s linear;
    }

    .media-chat.media-chat-reverse .media-body p {
        float: right;
        clear: right;
        background-color: #48b0f7;
        color: #fff;
    }

    .media-chat .media-body p {
        position: relative;
        padding: 6px 8px;
        margin: 4px 0;
        background-color: #f5f6f7;
        border-radius: 3px;
    }


    .border-light {
        border-color: #f1f2f3 !important;
    }

    .bt-1 {
        border-top: 1px solid #ebebeb !important;
    }

    .publisher {
        position: relative;
        display: -webkit-box;
        display: flex;
        -webkit-box-align: center;
        align-items: center;
        padding: 12px 20px;
        background-color: #f9fafb;
    }

        .publisher > *:first-child {
            margin-left: 0;
        }

        .publisher > * {
            margin: 0 8px;
        }

    .publisher-input {
        -webkit-box-flex: 1;
        flex-grow: 1;
        border: none;
        outline: none !important;
        background-color: transparent;
    }

    button, input, optgroup, select, textarea {
        font-family: Roboto,sans-serif;
        font-weight: 300;
    }

    .publisher-btn {
        background-color: transparent;
        border: none;
        color: #8b95a5;
        font-size: 16px;
        cursor: pointer;
        overflow: -moz-hidden-unscrollable;
        -webkit-transition: .2s linear;
        transition: .2s linear;
    }

    .file-group {
        position: relative;
        overflow: hidden;
    }

    .publisher-btn {
        background-color: transparent;
        border: none;
        color: #cac7c7;
        font-size: 16px;
        cursor: pointer;
        overflow: -moz-hidden-unscrollable;
        -webkit-transition: .2s linear;
        transition: .2s linear;
    }

    .file-group input[type="file"] {
        position: absolute;
        opacity: 0;
        z-index: -1;
        width: 20px;
    }

    .text-info {
        color: #48b0f7 !important;
    }

    time {
        color: #434446;
    }
</style>


@{

    var chatType = ViewData["chatType"];
    UserType senderType = (UserType)ViewData["senderType"];
    var senderId = ViewData["senderId"];
    var receiverType = ViewData["receiverType"];
    var receiverId = ViewData["receiverId"];
    var ref1 = ViewData["ref1"];
    var ref2 = ViewData["ref2"];
}

<div class="page-content page-container" id="page-content">
    <div class="padding">
        <div class=" container justify-content-center">
            <div class="">
                <div class="card card-bordered">
                    <div class="card-header">
                        <h4 class="card-title"><strong>Chat</strong></h4>
                        @*<a class="btn btn-xs btn-secondary" href="#" data-abc="true">Let's Chat App</a>*@
                    </div>

                    <div class="ps-container ps-theme-default ps-active-y" id="chat-content" style="overflow-y: scroll !important; height:400px !important;">
                        @*<div class="media media-chat">
                                <div class="media-body">
                                    <p>Hi</p>
                                    <p>How are you ...???</p>
                                    <p>What are you doing tomorrow?<br> Can we come up a bar?</p>
                                    <p class="meta"><time datetime="2018">23:58</time></p>
                                </div>
                            </div>*@

                        @*<div class="media media-meta-day">Today</div>*@

                        @foreach (var msg in Model)
                        {
                            if (msg.SenderType == senderType)
                            {
                                <div class="media media-chat">
                                    <div class="media-body">
                                        <p>@msg.Content</p>
                                        <p class="meta"><time datetime="2018">@(msg.MsgDateLocal.ToShortDateString() == DateTime.UtcNow.ToLocalTime().ToShortDateString() ? @msg.MsgDateLocal.ToShortTimeString() : @msg.MsgDateLocal )</time></p>
                                    </div>
                                </div>
                            }
                                        else
                                        {
                                <div class="media media-chat media-chat-reverse">
                                    <div class="media-body">
                                        <p>@msg.Content</p>
                                        <p class="meta"><time datetime="2018">@(msg.MsgDateLocal.ToShortDateString() == DateTime.UtcNow.ToLocalTime().ToShortDateString() ? @msg.MsgDateLocal.ToShortTimeString() : @msg.MsgDateLocal )</time></p>
                                    </div>
                                </div>
                            }
                        }

                        <div class="ps-scrollbar-x-rail" style="left: 0px; bottom: 0px;"><div class="ps-scrollbar-x" tabindex="0" style="left: 0px; width: 0px;"></div></div><div class="ps-scrollbar-y-rail" style="top: 0px; height: 0px; right: 2px;"><div class="ps-scrollbar-y" tabindex="0" style="top: 0px; height: 2px;"></div></div>
                    </div>

                    <div class="publisher bt-1 border-light">
                        <input class="publisher-input" id="msgInput" onkeyup="if (event.key === 'Enter') onSendMsg();" type="text" placeholder="Write something">
                        <span class="publisher-btn file-group">
                            <i class="fa fa-paperclip file-browser"></i>
                            <input type="file">
                        </span>
                        <a class="publisher-btn" href="#" data-abc="true"><i class="fa fa-smile"></i></a>
                        <button class="publisher-btn text-info" onclick="onSendMsg()"  data-abc="true"><i class="fa fa-paper-plane"></i></button>
                    </div>

                </div>
            </div>
        </div>
    </div>
</div>
<div hidden>
    <input type="text" value="@ViewData["chatType"]" id="chatType" />
    <input type="text" value="@ViewData["senderType"]" id="mySenderType" />
    <input type="text" value="@ViewData["senderId"]" id="mySenderId" />
    <input type="text" value="@ViewData["receiverType"]" id="myReceiverType" />
    <input type="text" value="@ViewData["receiverId"]" id="myReceiverId" />
    <input type="text" value="@ViewData["ref1"]" id="chatRef1" />
    <input type="text" value="@ViewData["ref2"]" id="chatRef2" />

</div>

@section Scripts{
    @* signalR Chat *@


    <script>
        scrollChatDown();
        joidGroup();
        globalChatInboxId = generateGlobalChatInboxId($('#chatType').val(), $('#chatRef1').val(), $('#chatRef2').val());
        //-----------------------------------------------------
        function onSendMsg() {
            if (!$('#msgInput').val()) return;


            var data = {
                inboxId: $('#chatInboxId').val(),
                chatType: $('#chatType').val(),
                referenceId1: $('#chatRef1').val(),
                referenceId2: $('#chatRef2').val(),
                senderId: $('#mySenderId').val(),
                senderType: $('#mySenderType').val(),
                receiverType: $('#myReceiverType').val(),
                receiverId: $('#myReceiverId').val(),
                msgType: 0,
                content: $('#msgInput').val(),
                msgDateLocal: (new Date()).toLocaleString().replace(',', ""),
            };
            chatConnection.invoke('SendMsg', JSON.stringify(data)).then(() => {
                console.log("dsadasd");
                $('#msgInput').val('');
                ShowMsgOnScreen(data);
               
            }).catch((e) => {
                console.error("Error ", e);
            });

        }


        //-----------------------------------------------------
        function ShowMsgOnScreen(msg) {
            var senderType = $('#mySenderType').val();
            switch (msg.msgType) {
                case 0: // Text
                    console.log("sdadasdasdasasdasadasdasdasdad");
                    addStringMsg(msg.senderType == senderType, msg.content, msg.msgDateLocal)

                    break;

                case 1: // Image

                    break;

                default:
            }
        }

        //-----------------------------------------------------
        function addStringMsg(iAmSender, content, date) {
            var dateFormated = (new Date(date)).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
            var sss = `<div class="media media-chat ${iAmSender ? '' : 'media-chat-reverse'}">
                        <div class="media-body">
                            <p>${content}</p>
                            <p class="meta"><time datetime="dateFormated">${dateFormated}</time></p>
                        </div>
                    </div>`;

            $('#chat-content').append(sss);
            scrollChatDown();

        }

        //-----------------------------------------------------
        function scrollChatDown() {
            $('#chat-content').scrollTop($('#chat-content')[0].scrollHeight);
        }

        //-----------------------------------------------------
        function joidGroup() {
            console.log(chatConnection.state);
            if (chatConnection.state != "Connected") {
                setTimeout(joidGroup, 400);
                return;
            }
            var chatType = parseInt($('#chatType').val());
            var ref1 = $('#chatRef1').val()
            var ref2 = $('#chatRef2').val()
            var senderType = parseInt($('#mySenderType').val());

            chatConnection
                .invoke("JoinGroup", chatType, ref1, ref2, senderType)
                .then(() => {
                    globalOpenedChat = chatType + ref1 + ref2;
                })
                .catch(function (err) {
                    return console.error("JoinGroup Error ", err.toString());
                });
        }

        //----------------------------------------
        chatConnection.on("receiveChatMsg", function (data) {
            console.log("hello")
            ShowMsgOnScreen(data);
        });

    </script>



}